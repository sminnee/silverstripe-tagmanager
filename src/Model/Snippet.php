<?php

namespace SilverStripe\TagManager\Model;

use SilverStripe\Core\ClassInfo;
use SilverStripe\ORM\DataObject;
use SilverStripe\Forms\FieldList;
use SilverStripe\Forms\DropdownField;
use SilverStripe\Forms\RequiredFields;
use SilverStripe\Core\Injector\Injector;
use SilverStripe\TagManager\SnippetProvider;
use SilverStripe\TagManager\Admin\ParamExpander;

/**
 * Represents one snippet added to the site with is params configured
 */
class Snippet extends DataObject
{
    use ParamExpander;

    private static $table_name = 'Snippet';

    private static $singular_name = "Tag";

    private static $db = [
        "SnippetClass" => "Varchar(255)",
        "SnippetParams" => "Text",
        "Active" => "Enum('on,off,partial', 'on')",
        "Sort" => "Int",
    ];

    private static $has_many = [
        'Pages' => SnippetPage::class,
    ];

    private static $summary_fields = [
        "SnippetSummary" => ["title" => "Tag"],
        "ActiveLabel" => ["title" => "Active"],
    ];

    private static $active_labels = [
        'on' => 'Enabled',
        'off' => 'Disabled',
    ];

    private static $default_sort = "Sort";

    /**
     * A list of disabled tag types. These can be added on a per project basis
     * to limit the amount of types available to  the content author.
     *
     * @var array
     */
    private static $disabled_types = [];

    public function getTitle()
    {
        $provider = $this->getSnippetProvider();
        if ($provider) {
            return $provider->getTitle();
        }
        return "(Unconfigured tag)";
    }

    public function getSnippetSummary()
    {
        $provider = $this->getSnippetProvider();
        if ($provider) {
            return $provider->getSummary((array)json_decode($this->SnippetParams, true));
        }
        return "(Unconfigured tag)";
    }

    public function getActiveLabel() {
        return $this->config()->active_labels[$this->Active];
    }

    /**
     * Return the snippet provider attached to this record
     */
    protected function getSnippetProvider()
    {
        if ($this->SnippetClass) {
            return Injector::inst()->get($this->SnippetClass);
        }
    }

    /**
     * Return the snippet provider attached to this record. This will exclude
     * disabled snippet types.
     *
     * @return string[]
     */
    protected function getSnippetTypes()
    {
        $types = [];

        foreach (ClassInfo::implementorsOf(SnippetProvider::class) as $class) {
            if ($this->isAllowedType($class)) {
                $types[$class] = Injector::inst()->get($class)->getTitle();
            }
        }

        return $types;
    }

    /**
     * Checks if the given class is allowed to be used by the content author.
     *
     * @param string $class
     * @return boolean
     */
    private function isAllowedType($class)
    {
        $disabled = $this->config()->disabled_types;

        return !is_array($disabled) || !in_array($class, $disabled);
    }

    public function getCMSFields()
    {
        $fields = parent::getCMSFields();

        $fields->addFieldToTab('Root.Main', (new DropdownField(
            'SnippetClass',
            'Tag type',
            $this->getSnippetTypes()
        ))->setEmptyString('(Choose tag type)'));

        $fields->dataFieldByName('Active')->setSource($this->config()->active_labels);

        $fields->removeByName('Sort');

        $providerFields = null;
        if ($provider = $this->getSnippetProvider()) {
            $providerFields = $provider->getParamFields();
        }

        $this->expandParams('SnippetParams', $providerFields, $fields, 'Root.Main');

        return $fields;
    }

    public function getCMSValidator()
    {
        return new RequiredFields('SnippetClass');
    }

    /**
     * Return the snippets generated by the configured provider
     *
     * @return array
     */
    public function getSnippets()
    {
        if ($provider = $this->getSnippetProvider()) {
            $params = (array)json_decode($this->SnippetParams, true);
            return $provider->getSnippets($params);
        }

        return [];
    }
}
